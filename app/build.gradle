/*
 * This file was generated by the Gradle 'init' task.
 *
 * This generated file contains a sample Java application project to get you started.
 * For more details take a look at the 'Building Java & JVM projects' chapter in the Gradle
 * User Manual available at https://docs.gradle.org/8.0.2/userguide/building_java_projects.html
 */

plugins {
    // Apply the application plugin to add support for building a CLI application in Java.
    id 'application'
}

repositories {
    // Use Maven Central for resolving dependencies.
    mavenCentral()
}

dependencies {
    // Use JUnit Jupiter for testing.
    testImplementation 'org.junit.jupiter:junit-jupiter:5.9.1'

    // This dependency is used by the application.
    implementation 'com.google.guava:guava:31.1-jre'

      // Use JUnit Jupiter for testing.
    testImplementation 'org.junit.jupiter:junit-jupiter:5.9.1'
    
    // Add XML APIs (these are actually part of the standard library, so not strictly necessary)
    // implementation 'javax.xml:javax.xml-api:1.4.0' // Commented out as standard library is sufficient

    // Optionally, add a logging library if you need logging
    implementation 'org.slf4j:slf4j-api:2.0.7'
    implementation 'org.slf4j:slf4j-simple:2.0.7'
     implementation 'com.google.code.gson:gson:2.8.8'
    
}

application {
    // Define the main class for the application.
    mainClass = 'sdp.task2.App'
}

tasks.named('test') {
    // Use JUnit Platform for unit tests.
    useJUnitPlatform()
}

task runApp(type: JavaExec) {
    dependsOn 'build'

    // Set the classpath to include the compiled classes
    classpath = sourceSets.main.runtimeClasspath

    // Set the main class
    mainClass = 'sdp.task2.App'

    // Specify the command line arguments
    //args = []

    // Add standard input for user input
    standardInput = System.in

}


run.dependsOn runApp
